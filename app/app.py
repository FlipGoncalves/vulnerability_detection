import logging
from flask import Flask,session ,flash, render_template, render_template_string, url_for, request, redirect, make_response
from flask.templating import render_template_string
from werkzeug.utils import secure_filename
import os
from base64 import b64encode
import tempfile
import sqlite3 as sql
import binascii

secret_key = os.urandom(24)
secret_key_encoded = binascii.hexlify(secret_key)

app = Flask(__name__)

app.logger.error(secret_key_encoded)
app.config['SECRET_KEY'] = secret_key_encoded

users = {}
admin = False
app.config['SESSION_COOKIE_HTTPONLY'] = False

app.config['UPLOAD_FOLDER'] = "/static/images"
app.config['TEMP_DIR'] = "/tmp"

with sql.connect('mydb') as con:
    cur = con.cursor()
    cur.execute("""CREATE TABLE if not exists User (
        username text primary key,
        password text,
        photo blob);""")
    cur.execute("""create table if not exists Project (
        id int primary key,
        name text);""")
    cur.execute("""create table if not exists ProjectUser (
        idProject int,
        username text,
        hours int,
        area text,
        primary key (idProject, username),
        foreign key (idProject) references Project (id),
        foreign key (username) references User (username))""")
    cur.close()


"""
app.config["ALLOWED_EXTENSIONS"] = {'js','php','txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif', 'mp4'}
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in app.config["ALLOWED_EXTENSIONS"]
"""

@app.route('/')
def index():
    try :
        if session['logged']:
            # logged in
            user = session["username"]
            if user:
                # user exists
                with sql.connect('mydb') as con:
                    cur = con.cursor()
                    cur.execute(f"SELECT * FROM User WHERE username = \'{user}\'")
                    result = cur.fetchall()
                    cur.close()
                    if result != []:
                        app.logger.debug(f"{result=:}")
                        return render_template('home.html', user=result)
    except KeyError as k:
        return render_template("index.html")
    return render_template("index.html")

@app.route('/logout')
def logout():
    session['logged'] = False
    session['username'] = None
    return redirect("/")


@app.route('/register', methods=['POST', 'GET'])
def register():
    if request.method == 'POST':
        user = request.form["username"]
        user_pass = request.form["password"]
        user_pass_2 = request.form["repeat_password"]
        name = request.form["photoName"]

        if 'file' not in request.files:
            app.logger.info('No file part')

        file = request.files['file']

        if file.filename == '':
            name = "img_avatar2.png"

        else:
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], name)[1:])
        try:
            if (user_pass == user_pass_2):
                with sql.connect('mydb') as con:
                    cur = con.cursor()
                    # img value defaults to img_avatar2.png
                    cur.execute(f"INSERT INTO User(username, password, photo) VALUES (\'{user}\' , \'{user_pass}\', \'{name}\') ")
                    app.logger.info(f"INSERT INTO User(username, password, photo) VALUES (\'{user}\' , \'{user_pass}\', \'{'img_avatar2.png'}\') ")
                    con.commit()
                    cur.close()
                return render_template("index.html", erro = False)
        except Exception as e:
            app.logger.error(e)
            return render_template("index.html", erro = True, errorMessage=e)
    else:
        return render_template("index.html", erro = False)
    return render_template("index.html", erro = True)


@app.route('/login', methods=['POST', 'GET'])
def login():
    if request.method == 'POST':
        user = request.form["username"]
        user_pass = request.form["password"]
        try:
            with sql.connect('mydb') as con:
                cur = con.cursor()
                cur.execute('SELECT * FROM User WHERE username = \''+ user +'\' AND password = \''+ user_pass +'\'')
                q = cur.fetchall()
                cur.close()
                if q != []:
                    users = []
                    admin = False
                    try:
                        # Create session data, we can access this data in other routes
                        session['logged'] = True
                        session['username'] = user
                        session["project_id"] = 1
                        app.logger.debug(session["project_id"])
                        # Redirect to home page
                        return redirect("/home")
                    except Exception as e:
                        app.logger.error(e)
        except Exception as e:
            app.logger.error(e)
    return render_template("index.html")

@app.route('/home')
def home():
    try :
        a = session['logged']
    except KeyError as k:
        return redirect("/")
    if session['logged']:
        # logged in
        user = session["username"]
        if user :
            # user exists
            with sql.connect('mydb') as con:
                cur = con.cursor()
                cur.execute(f"SELECT User.username,User.password, User.photo FROM User INNER JOIN ProjectUser  On User.username = ProjectUser.username")
                result = cur.fetchall()
                cur.close()
                if result != []:
                    app.logger.error(f"->>>>>>{result=:}")
                    return render_template('home.html', user=result)
                else:
                    return render_template('home.html', user=[])

    return redirect('/')

@app.route('/add/<string:username>', methods=['GET', 'POST'])
def add_user_Project(username):
    session["project_id"] = 1
    if request.method == 'GET':
        try:
            with sql.connect('mydb') as con:
                cur = con.cursor()
                #                                                                               1                       'pedro'   0 'someArea'
                cur.execute(f"INSERT INTO ProjectUser (idProject,username,hours, area) VALUES ({session['project_id']},\'{username}\',0,'SomeArea')")
                con.commit()
                cur.close()
        except Exception as e:
            app.logger.error(f"Exception {e=:}")
            return f"There was an issue adding the user {  username }  to your project {  session['project_id'] } "
    else:
        return redirect(url_for('home'))
    return redirect(url_for('home'))


@app.route('/search', methods=["GET"])
def add_user():
    #return render_template_string("home.html", user=request.args.get('query'))
    try :
        a = session['logged']
    except KeyError as k:
        # non existence of key means that he is not logged in
        return redirect("/")

    if session['logged']:
        users = []
        admin = True
        if request.method == 'GET':
            user = request.args.get("username")
            if user == 'admin':
                admin = True
            else:
                admin = False
            try:
                with sql.connect('mydb') as con:
                    cur = con.cursor()
                    cur.execute(f"SELECT * FROM User WHERE username LIKE \'%{user}%\'")
                    q = cur.fetchall()
                    cur.close()
                    if q != []:
                        app.logger.debug(f"{q=:}")
                        return render_template("AddUserToProject.html", lista=q,  searchItem=user)
                    else:
                        app.logger.debug("q is empty returning unfound query")
                        templateString = f"<p> Did not found {user} . </p>"
                        return render_template_string(templateString)
            except Exception as e:
                app.logger.error(e)
    else:
        #user not logged in cause  session 'logged' = false or 0 or whatever
        return redirect('/')

    return redirect(request.url)

@app.route('/template_injection')
def template_injection():
    # function that returns an rendered html injected with file uploading
    # this route was created so that there was no messing the rest of the app
    # not to make it intentionally easy to do
    return render_template("demo.html")

# You can still use this page even not logged in cause this way you can see private information
@app.route('/searchUser', methods=["GET"])
def search_user():
    users = []
    admin = True
    if request.method == 'GET':
        user = request.args.get("username")

        if user == 'admin':
            admin = True
        else:
            admin = False
        try:
            with sql.connect('mydb') as con:
                cur = con.cursor()
                cur.execute(f"SELECT * FROM User WHERE username LIKE \'%{user}%\'")
                #app.logger.info(f"SELECT * FROM User WHERE username LIKE \'%{user}%\'")
                q = cur.fetchall()
                cur.close()

                if q != []:
                    app.logger.debug(q)
                    app.logger.debug("q is not empty")
                    return render_template("searchResult.html", lista=q, searchItem=user)
                else:
                    """
                    return render_template("searchResult.html", lista=[], searchItem=user) # safe way
                    unsufe
                    """
                    app.logger.debug("q is empty returning unfound query")
                    templateString = f"<p> Did not found {user} . </p>"
                    return render_template_string(templateString)

        except Exception as e:
            app.logger.error(e)
    return render_template("home.html")


if __name__ == "__main__":
    #Setup the logger
    file_handler = logging.FileHandler('output.log')
    handler = logging.StreamHandler()
    file_handler.setLevel(logging.DEBUG)
    handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(logging.Formatter(
       '%(asctime)s %(levelname)s: %(message)s '
       '[in %(pathname)s:%(lineno)d]'
    ))
    handler.setFormatter(logging.Formatter(
       '%(asctime)s\t %(levelname)s: %(message)s '
       '\n[in %(pathname)s:%(lineno)d]'
    ))
    app.logger.addHandler(handler)
    app.logger.addHandler(file_handler)
    app.logger.error('first test message...')
    app.run(debug = True)
