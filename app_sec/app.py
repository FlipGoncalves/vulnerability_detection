import logging
from flask import Flask, session, flash, render_template, url_for, request, redirect
from werkzeug.utils import secure_filename
from PIL import Image
import os
import sqlite3 as sql
import tempfile
import hashlib

users = []

app = Flask(__name__)

app.secret_key=b'\xb5\x95\x96\xeeS\xc1\xa9\xc1\xc4\xdcA!2\x0e\x10\xa0'
app.config['UPLOAD_FOLDER'] = "static/images"
app.config['TEMP_DIR'] = "/tmp"

with sql.connect('mydb') as con:
    cur = con.cursor()
    cur.execute("""CREATE TABLE if not exists User (
        username text primary key,
        password text,
        photo blob);""")
    cur.execute("""create table if not exists Project (
        id int primary key,
        name text);""")
    cur.execute("""create table if not exists ProjectUser (
        idProject int,
        username text,
        hours int,
        area text,
        primary key (idProject, username),
        foreign key (idProject) references Project (id),
        foreign key (username) references User (username))""")
    cur.close()

""" Tentativa de resolver Vulnerabilidade CWE 319: Cleartext Transmission of Sensitive Information
@app.before_request
def before_request():
    scheme = request.headers.get('X-Forwarded-Proto')
    if scheme and scheme == 'http' and request.url.startswith('http://'):
        url = request.url.replace('http://', 'https://', 1)
    code = 301
    return redirect(url, code = code)
"""

app.config["ALLOWED_EXTENSIONS"] = {'png', 'jpg', 'jpeg'}
def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in app.config["ALLOWED_EXTENSIONS"]

@app.route('/')
def index():
    try :
        if session['logged']:
            # logged in
            user = session["username"]
            if user:
                # user exists
                with sql.connect('mydb') as con:
                    cur = con.cursor()
                    cur.execute(f"SELECT * FROM User WHERE username = \'{user}\'")
                    result = cur.fetchall()
                    cur.close()
                    if result != []:
                        app.logger.debug(f"{result=:}")
                        return render_template('home.html', user=result)
    except KeyError as k:
        return render_template("index.html")
    return render_template("index.html")

@app.route('/logout')
def logout():
    session['logged'] = False
    session['username'] = None
    return redirect("/")

@app.route('/register', methods=['POST', 'GET'])
def register():
    if request.method == 'POST':
        user = request.form["username"]
        user_pass = request.form["password"]
        user_pass_2 = request.form["repeat_password"]
        name = request.form["photoName"]

        # file uploading
        if 'file' not in request.files:
            app.logger.info('No file part')

        file = request.files['file']

        if file.filename == '':
            name = "img_avatar2.png"

        else:
            # file was uploaded but is it "safe"
            if file and allowed_file(file.filename):
                app.logger.debug(file.filename)
                name = secure_filename(file.filename)
                # create tempFile
                path_save = os.path.join(app.config['UPLOAD_FOLDER'], name)
                # touch file
                if not os.path.exists(path_save):
                    with open(path_save, 'w+'): pass
                file.save(path_save)
            else:
                print("Forbidden file extension")
                app.logger.debug("Forbidden file extension")
        #endif uploads

        """
        with sql.connect('mydb') as con:
            cur = con.cursor()
            cur.execute('SELECT username, password FROM User;')
            q = cur.fetchall()
            cur.close()
            """
            #print(q)

        #print(hashlib.md5(user_pass.encode("utf-8", errors='static')).hexdigest())

        try:
            if (user_pass == user_pass_2):
                user_pass = hashlib.md5(user_pass.encode("utf-8", errors='static')).hexdigest()
                with sql.connect('mydb') as con:
                    cur = con.cursor()
                    # img value defaults to img_avatar2.png
                    cur.execute(f"INSERT INTO User(username, password, photo) VALUES  (?, ?, ?) ", (user, user_pass, name))
                    con.commit()
                    cur.close()
                return render_template("index.html", erro = False)
        except Exception as e:
            app.logger.error(e)
            return render_template("index.html", erro = True)

        return render_template("index.html", erro = True)

@app.route('/login', methods=['POST', 'GET'])
def login():
    if request.method == 'POST':
        user = request.form["username"]
        user_pass = request.form["password"]
        try:
            with sql.connect('mydb') as con:
                cur = con.cursor()
                cur.execute('SELECT * FROM User WHERE (username = ?) AND (password = ?)', (user, hashlib.md5(user_pass.encode("utf-8", errors='static')).hexdigest()))
                q = cur.fetchall()
                cur.close()
                print(q)
                if q != []:
                    users = []
                    admin = False
                    try:
                        # Create session data, we can access this data in other routes
                        session['logged'] = True
                        session['username'] = user
                        session["project_id"] = 1
                        #app.logger.debug(session["project_id"])
                        # Redirect to home page
                        return redirect("/home")
                    except Exception as e:
                        app.logger.error(e)
        except:
            pass
    return render_template("index.html")

@app.route('/home')
def home():
    try :
        a = session['logged']
    except KeyError as k:
        return redirect("/")
    if session['logged']:
        # logged in
        user = session["username"]
        if user :
            # user exists
            with sql.connect('mydb') as con:
                cur = con.cursor()
                cur.execute(f"SELECT User.username,User.password, User.photo FROM User INNER JOIN ProjectUser On User.username = ProjectUser.username")
                result = cur.fetchall()
                print("result: ")
                print(result)
                cur.close()
                if result != []:
                    return render_template('home.html', user=result)
    return render_template('home.html')

@app.route('/search', methods=['GET', 'POST'])
def add_user():
    """
    if request.method == 'GET':
        user = request.form["username"]
        if user == "admin":
            return render_template("home.html", user=users, admin=True)
    """
    try :
        a = session['logged']
    except KeyError as k:
        return redirect("/")
    if session['logged']:
        if request.method == 'POST':
            user = request.form["username"]
            if user == "admin":
                return render_template("home.html", user=users, admin=True)
            try:
                with sql.connect('mydb') as con:
                    cur = con.cursor()
                    cur.execute('SELECT * FROM User WHERE username = ? AND username = ?', (user, user))
                    q = cur.fetchall()
                    cur.close()
                    #print(q)
                    if q != []:
                        return render_template("AddUserToProject.html", lista=q, searchItem=user)
                    else:
                        return render_template("home.html") # safe way

            except Exception as e:
                pass
        return render_template("home.html", user=users)
    else:
        return redirect(url_for(''))

    return redirect(request.url)

@app.route('/add/<string:username>', methods=['GET', 'POST'])
def add_user_Project(username):
    session["project_id"] = 1
    try :
        a = session['logged']
    except KeyError as k:
        return redirect("/")

    if session['logged']:
        if request.method == 'GET':
            try:
                with sql.connect('mydb') as con:
                    cur = con.cursor()
                    #                                                                               1                       'pedro'   0 'someArea'
                    cur.execute(f"INSERT INTO ProjectUser (idProject,username,hours, area) VALUES ({session['project_id']},\'{username}\',0,'SomeArea')")
                    con.commit()
                    cur.close()
            except Exception as e:
                app.logger.error(f"Exception {e=:}")
                return f"There was an issue adding the user {  username }  to your project {  session['project_id'] } "
        else:
            return redirect(url_for('home'))
        return redirect(url_for('home'))
    else:
        return redirect(url_for(''))
    return redirect(url_for(''))


@app.route('/searchUser', methods=["GET"])
def search_user():
    users = []
    admin = True
    try :
        a = session['logged']
    except KeyError as k:
        return redirect("/")

    if request.method == 'GET':
        user_ = request.args.get("username")
        #app.logger.debug(user)
        if user_ == 'admin':
            return render_template("home.html", admin=True)
        try:
            with sql.connect('mydb') as con:
                cur = con.cursor()
                cur.execute('SELECT * FROM User WHERE username LIKE ? AND username LIKE ?', (user_, user_))
                #(f"SELECT * FROM User WHERE username LIKE \'%{user}%\'")
                q = cur.fetchall()
                cur.close()
                if q != []:
                    [q.pop(i) and print(i) for i in range(0,len(q)) if 'admin' == q[i][0]]
                    app.logger.debug("q is not empty")
                    return render_template("searchResult.html", lista=q, searchItem=user_)
                else:
                    app.logger.debug("q is empty")
                    return render_template("searchResult.html", lista=[], searchItem=user_) # safe way
        except Exception as e:
            app.logger.error(e)
    return render_template("home.html")

if __name__ == "__main__":
    #Setup the logger
    file_handler = logging.FileHandler('output_sec.log')
    handler = logging.StreamHandler()
    file_handler.setLevel(logging.DEBUG)
    handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(logging.Formatter(
       '%(asctime)s %(levelname)s: %(message)s '
       '[in %(pathname)s:%(lineno)d]'
    ))
    handler.setFormatter(logging.Formatter(
       '%(asctime)s %(levelname)s: %(message)s '
       '[in %(pathname)s:%(lineno)d]'
    ))
    app.logger.addHandler(handler)
    app.logger.addHandler(file_handler)
    #app.logger.error('first test message...')
    app.run(debug = True)
